AnimationAction
AnimationActions schedule the performance of the animations which are stored in AnimationClips.

Note: Most of AnimationAction's methods can be chained.

For an overview of the different elements of the three.js animation system see the "Animation System" article in the "Next Steps" section of the manual.

Constructor
AnimationAction( mixer : AnimationMixer, clip : AnimationClip, localRoot : Object3D )
mixer - the AnimationMixer that is controlled by this action.
clip - the AnimationClip that holds the animation data for this action.
localRoot - the root object on which this action is performed.
blendMode - defines how the animation is blended/combined when two or more animations are simultaneously played.

Note: Instead of calling this constructor directly you should instantiate an AnimationAction with AnimationMixer.clipAction since this method provides caching for better performance.

Properties
.blendMode : Number
Defines how the animation is blended/combined when two or more animations are simultaneously played. Valid values are NormalAnimationBlendMode (default) and AdditiveAnimationBlendMode.

.clampWhenFinished : Boolean
If clampWhenFinished is set to true the animation will automatically be paused on its last frame.

If clampWhenFinished is set to false, enabled will automatically be switched to false when the last loop of the action has finished, so that this action has no further impact.

Default is false.

Note: clampWhenFinished has no impact if the action is interrupted (it has only an effect if its last loop has really finished).

.enabled : Boolean
Setting enabled to false disables this action, so that it has no impact. Default is true.

When the action is re-enabled, the animation continues from its current time (setting enabled to false doesn't reset the action).

Note: Setting enabled to true doesn’t automatically restart the animation. Setting enabled to true will only restart the animation immediately if the following condition is fulfilled: paused is false, this action has not been deactivated in the meantime (by executing a stop or reset command), and neither weight nor timeScale is 0.

.loop : Number
The looping mode (can be changed with setLoop). Default is THREE.LoopRepeat (with an infinite number of repetitions)

Must be one of these constants:

THREE.LoopOnce - playing the clip once,
THREE.LoopRepeat - playing the clip with the chosen number of repetitions, each time jumping from the end of the clip directly to its beginning,
THREE.LoopPingPong - playing the clip with the chosen number of repetitions, alternately playing forward and backward.

.paused : Boolean
Setting paused to true pauses the execution of the action by setting the effective time scale to 0. Default is false.


.repetitions : Number
The number of repetitions of the performed AnimationClip over the course of this action. Can be set via setLoop. Default is Infinity.

Setting this number has no effect, if the loop mode is set to THREE.LoopOnce.

.time : Number
The local time of this action (in seconds, starting with 0).

The value gets clamped or wrapped to 0...clip.duration (according to the loop state). It can be scaled relatively to the global mixer time by changing timeScale (using setEffectiveTimeScale or setDuration).

.timeScale : Number
Scaling factor for the time. A value of 0 causes the animation to pause. Negative values cause the animation to play backwards. Default is 1.

Properties/methods concerning timeScale (respectively time) are: getEffectiveTimeScale, halt, paused, setDuration, setEffectiveTimeScale, stopWarping, syncWith, warp.

.weight : Number
The degree of influence of this action (in the interval [0, 1]). Values between 0 (no impact) and 1 (full impact) can be used to blend between several actions. Default is 1.

Properties/methods concerning weight are: crossFadeFrom, crossFadeTo, enabled, fadeIn, fadeOut, getEffectiveWeight, setEffectiveWeight, stopFading.

.zeroSlopeAtEnd : Boolean
Enables smooth interpolation without separate clips for start, loop and end. Default is true.

.zeroSlopeAtStart : Boolean
Enables smooth interpolation without separate clips for start, loop and end. Default is true.

Methods
.crossFadeFrom ( fadeOutAction : AnimationAction, durationInSeconds : Number, warpBoolean : Boolean ) : this
Causes this action to fade in, fading out another action simultaneously, within the passed time interval. This method can be chained.

If warpBoolean is true, additional warping (gradually changes of the time scales) will be applied.

Note: Like with fadeIn/fadeOut, the fading starts/ends with a weight of 1.

.crossFadeTo ( fadeInAction : AnimationAction, durationInSeconds : Number, warpBoolean : Boolean ) : this
Causes this action to fade out, fading in another action simultaneously, within the passed time interval. This method can be chained.

If warpBoolean is true, additional warping (gradually changes of the time scales) will be applied.

Note: Like with fadeIn/fadeOut, the fading starts/ends with a weight of 1.

.fadeIn ( durationInSeconds : Number ) : this
Increases the weight of this action gradually from 0 to 1, within the passed time interval. This method can be chained.

.fadeOut ( durationInSeconds : Number ) : this
Decreases the weight of this action gradually from 1 to 0, within the passed time interval. This method can be chained.

.getEffectiveTimeScale () : Number
Returns the effective time scale (considering the current states of warping and paused).

.getEffectiveWeight () : Number
Returns the effective weight (considering the current states of fading and enabled).

.getClip () : AnimationClip
Returns the clip which holds the animation data for this action.

.getMixer () : AnimationMixer
Returns the mixer which is responsible for playing this action.

.getRoot () : Object3D
Returns the root object on which this action is performed.

.halt ( durationInSeconds : Number ) : this
Decelerates this animation's speed to 0 by decreasing timeScale gradually (starting from its current value), within the passed time interval. This method can be chained.

.isRunning () : Boolean
Returns true if the action’s time is currently running.

In addition to being activated in the mixer (see isScheduled) the following conditions must be fulfilled: paused is equal to false, enabled is equal to true, timeScale is different from 0, and there is no scheduling for a delayed start (startAt).

Note: isRunning being true doesn’t necessarily mean that the animation can actually be seen. This is only the case, if weight is additionally set to a non-zero value.

.isScheduled () : Boolean
Returns true, if this action is activated in the mixer.

Note: This doesn’t necessarily mean that the animation is actually running (compare the additional conditions for isRunning).

.play () : this
Tells the mixer to activate the action. This method can be chained.

Note: Activating this action doesn’t necessarily mean that the animation starts immediately: If the action had already finished before (by reaching the end of its last loop), or if a time for a delayed start has been set (via startAt), a reset must be executed first. Some other settings (paused=true, enabled=false, weight=0, timeScale=0) can prevent the animation from playing, too.

.reset () : this
Resets the action. This method can be chained.

This method sets paused to false, enabled to true, time to 0, interrupts any scheduled fading and warping, and removes the internal loop count and scheduling for delayed starting.

Note: .reset is always called by stop, but .reset doesn’t call .stop itself. This means: If you want both, resetting and stopping, don’t call .reset; call .stop instead.

.setDuration ( durationInSeconds : Number ) : this
Sets the duration for a single loop of this action (by adjusting timeScale and stopping any scheduled warping). This method can be chained.

.setEffectiveTimeScale ( timeScale : Number ) : this
Sets the timeScale and stops any scheduled warping. This method can be chained.

If paused is false, the effective time scale (an internal property) will also be set to this value; otherwise the effective time scale (directly affecting the animation at this moment) will be set to 0.

Note: .paused will not be switched to true automatically, if .timeScale is set to 0 by this method.

.setEffectiveWeight ( weight : Number ) : this
Sets the weight and stops any scheduled fading. This method can be chained.

If enabled is true, the effective weight (an internal property) will also be set to this value; otherwise the effective weight (directly affecting the animation at this moment) will be set to 0.

Note: .enabled will not be switched to false automatically, if .weight is set to 0 by this method.

.setLoop ( loopMode : Number, repetitions : Number) : this
Sets the loop mode and the number of repetitions. This method can be chained.

.startAt ( startTimeInSeconds : Number ) : this
Defines the time for a delayed start (usually passed as AnimationMixer.time + deltaTimeInSeconds). This method can be chained.

Note: The animation will only start at the given time, if .startAt is chained with play, or if the action has already been activated in the mixer (by a previous call of .play, without stopping or resetting it in the meantime).

.stop () : this
Tells the mixer to deactivate this action. This method can be chained.

The action will be immediately stopped and completely reset.

Note: You can stop all active actions on the same mixer in one go via mixer.stopAllAction.

.stopFading () : this
Stops any scheduled fading which is applied to this action. This method can be chained.

.stopWarping () : this
Stops any scheduled warping which is applied to this action. This method can be chained.

.syncWith ( otherAction : AnimationAction ) : this
Synchronizes this action with the passed other action. This method can be chained.

Synchronizing is done by setting this action’s time and timeScale values to the corresponding values of the other action (stopping any scheduled warping).

Note: Future changes of the other action's time and timeScale will not be detected.

.warp ( startTimeScale : Number, endTimeScale : Number, durationInSeconds : Number ) : this
Changes the playback speed, within the passed time interval, by modifying timeScale gradually from startTimeScale to endTimeScale. This method can be chained.

Events
There are two events indicating when a single loop of the action respectively the entire action has finished. You can react to them with:

mixer.addEventListener( 'loop', function( e ) { …} ); // properties of e: type, action and loopDelta 
mixer.addEventListener( 'finished', function( e	) { …} ); // properties of e: type, action and direction
Source
src/animation/AnimationAction.js

AnimationClip
An AnimationClip is a reusable set of keyframe tracks which represent an animation.

For an overview of the different elements of the three.js animation system see the "Animation System" article in the "Next Steps" section of the manual.

Constructor
AnimationClip( name : String, duration : Number, tracks : Array )
name - a name for this clip.
duration - the duration of this clip (in seconds). If a negative value is passed, the duration will be calculated from the passed tracks array.
tracks - an array of KeyframeTracks.
blendMode - defines how the animation is blended/combined when two or more animations are simultaneously played.

Note: Instead of instantiating an AnimationClip directly with the constructor, you can use one of its static methods to create AnimationClips: from JSON (parse), from morph target sequences (CreateFromMorphTargetSequence, CreateClipsFromMorphTargetSequences) or from animation hierarchies (parseAnimation) - if your model doesn't already hold AnimationClips in its geometry's animations array.

Properties
.blendMode : Number
Defines how the animation is blended/combined when two or more animations are simultaneously played. Valid values are NormalAnimationBlendMode (default) and AdditiveAnimationBlendMode.

.duration : Number
The duration of this clip (in seconds). This can be calculated from the tracks array via resetDuration.

.name : String
A name for this clip. A certain clip can be searched via findByName.

.tracks : Array
An array containing a KeyframeTrack for each property that are animated by this clip.

.uuid : String
The UUID of this clip instance. It gets automatically assigned and shouldn't be edited.

Methods
.clone () : AnimationClip
Returns a copy of this clip.

.optimize () : this
Optimizes each track by removing equivalent sequential keys (which are common in morph target sequences).

.resetDuration () : this
Sets the duration of the clip to the duration of its longest KeyframeTrack.

.toJSON () : Object
Returns a JSON object representing the serialized animation clip.

.trim () : this
Trims all tracks to the clip's duration.

.validate () : Boolean
Performs minimal validation on each track in the clip. Returns true if all tracks are valid.

Static Methods
.CreateClipsFromMorphTargetSequences ( name : String, morphTargetSequence : Array, fps : Number, noLoop : Boolean ) : Array
Returns an array of new AnimationClips created from the morph target sequences of a geometry, trying to sort morph target names into animation-group-based patterns like "Walk_001, Walk_002, Run_001, Run_002...".

.CreateFromMorphTargetSequence ( name : String, morphTargetSequence : Array, fps : Number, noLoop : Boolean ) : AnimationClip
Returns a new AnimationClip from the passed morph targets array of a geometry, taking a name and the number of frames per second.

Note: The fps parameter is required, but the animation speed can be overridden in an AnimationAction via animationAction.setDuration.

.findByName ( objectOrClipArray : Object, name : String ) : AnimationClip
Searches for an AnimationClip by name, taking as its first parameter either an array of AnimationClips, or a mesh or geometry that contains an array named "animations".

.parse ( json : Object ) : AnimationClip
Parses a JSON representation of a clip and returns an AnimationClip.

.parseAnimation ( animation : Object, bones : Array ) : AnimationClip
Parses the animation.hierarchy format and returns an AnimationClip.

.toJSON ( clip : AnimationClip ) : Object
Takes an AnimationClip and returns a JSON object.

Source
src/animation/AnimationClip.js

AnimationMixer
The AnimationMixer is a player for animations on a particular object in the scene. When multiple objects in the scene are animated independently, one AnimationMixer may be used for each object.

For an overview of the different elements of the three.js animation system see the "Animation System" article in the "Next Steps" section of the manual.

Constructor
AnimationMixer( rootObject : Object3D )
rootObject - the object whose animations shall be played by this mixer.

Properties
.time : Number
The global mixer time (in seconds; starting with 0 on the mixer's creation).

.timeScale : Number
A scaling factor for the global mixer time.

Note: Setting the mixer's timeScale to 0 and later back to 1 is a possibility to pause/unpause all actions that are controlled by this mixer.

Methods
.clipAction (clip : AnimationClip, optionalRoot : Object3D) : AnimationAction
Returns an AnimationAction for the passed clip, optionally using a root object different from the mixer's default root. The first parameter can be either an AnimationClip object or the name of an AnimationClip.

If an action fitting the clip and root parameters doesn't yet exist, it will be created by this method. Calling this method several times with the same clip and root parameters always returns the same clip instance.

.existingAction (clip : AnimationClip, optionalRoot : Object3D) : AnimationAction
Returns an existing AnimationAction for the passed clip, optionally using a root object different from the mixer's default root.

The first parameter can be either an AnimationClip object or the name of an AnimationClip.

.getRoot () : Object3D
Returns this mixer's root object.

.stopAllAction () : this
Deactivates all previously scheduled actions on this mixer.

.update (deltaTimeInSeconds : Number) : this
Advances the global mixer time and updates the animation.

This is usually done in the render loop, passing clock.getDelta scaled by the mixer's timeScale.

.setTime (timeInSeconds : Number) : this
Sets the global mixer to a specific time and updates the animation accordingly.

This is useful when you need to jump to an exact time in an animation. The input parameter will be scaled by the mixer's timeScale.

.uncacheClip (clip : AnimationClip) : undefined
Deallocates all memory resources for a clip. Before using this method make sure to call AnimationAction.stop() for all related actions.

.uncacheRoot (root : Object3D) : undefined
Deallocates all memory resources for a root object. Before using this method make sure to call AnimationAction.stop() for all related actions or alternatively .stopAllAction() when the mixer operates on a single root.

.uncacheAction (clip : AnimationClip, optionalRoot : Object3D) : undefined
Deallocates all memory resources for an action. Before using this method make sure to call AnimationAction.stop() to deactivate the action.

Source
src/animation/AnimationMixer.js

AnimationObjectGroup
A group of objects that receives a shared animation state.

For an overview of the different elements of the three.js animation system see the "Animation System" article in the "Next Steps" section of the manual.

Usage:
Add objects you would otherwise pass as 'root' to the constructor or the clipAction method of AnimationMixer and instead pass this object as 'root'.

Note that objects of this class appear as one object to the mixer, so cache control of the individual objects must be done on the group.

Limitations
The animated properties must be compatible among all objects in the group.

A single property can either be controlled through a target group or directly, but not both.

Constructor
AnimationObjectGroup( obj1 : Object, obj2 : Object, obj3 : Object, ...)
obj - an arbitrary number of meshes that share the same animation state.

Properties
.isAnimationObjectGroup : Boolean
Read-only flag to check if a given object is of type AnimationObjectGroup.

.stats : Object
An object that contains information of this AnimationObjectGroup (total number, number in use, number of bindings per object)

.uuid : String
The UUID of this AnimationObjectGroup. It gets automatically assigned and shouldn't be edited.

Methods
.add ( obj1 : Object, obj2 : Object, obj3 : Object, ... ) : undefined
Adds an arbitrary number of objects to this AnimationObjectGroup.

.remove ( obj1 : Object, obj2 : Object, obj3 : Object, ... ) : undefined
Removes an arbitrary number of objects from this AnimationObjectGroup.

.uncache ( obj1 : Object, obj2 : Object, obj3 : Object, ... ) : undefined
Deallocates all memory resources for the passed objects of this AnimationObjectGroup.

Source
src/animation/AnimationObjectGroup.js

AnimationUtils
An object with various functions to assist with animations, used internally.

Methods
.convertArray ( array, type, forceClone ) : Array
Converts an array to a specific type.

.flattenJSON ( jsonKeys, times, values, valuePropertyName ) : Array
Used for parsing AOS keyframe formats.

.getKeyframeOrder ( times ) : Array
Returns an array by which times and values can be sorted.

.isTypedArray ( object ) : Boolean
Returns true if the object is a typed array.

.makeClipAdditive ( targetClip : AnimationClip, referenceFrame : Number, referenceClip : AnimationClip, fps : Number ) : AnimationClip
Converts the keyframes of the given animation clip to an additive format.

.sortedArray ( values, stride, order ) : Array
Sorts the array previously returned by getKeyframeOrder.

.subclip ( clip : AnimationClip, name : String, startFrame : Number, endFrame : Number, fps : Number ) : AnimationClip
Creates a new clip, containing only the segment of the original clip between the given frames.

Source
src/animation/AnimationUtils.js

KeyframeTrack
A KeyframeTrack is a timed sequence of keyframes, which are composed of lists of times and related values, and which are used to animate a specific property of an object.

For an overview of the different elements of the three.js animation system see the "Animation System" article in the "Next Steps" section of the manual.

In contrast to the animation hierarchy of the JSON model format a KeyframeTrack doesn't store its single keyframes as objects in a "keys" array (holding the times and the values for each frame together in one place).

Instead of this there are always two arrays in a KeyframeTrack: the times array stores the time values for all keyframes of this track in sequential order, and the values array contains the corresponding changing values of the animated property.

A single value, belonging to a certain point of time, can not only be a simple number, but (for example) a vector (if a position is animated) or a quaternion (if a rotation is animated). For this reason the values array (which is a flat array, too) might be three or four times as long as the times array.

Corresponding to the different possible types of animated values there are several subclasses of KeyframeTrack, inheriting the most properties and methods:

BooleanKeyframeTrack
ColorKeyframeTrack
NumberKeyframeTrack
QuaternionKeyframeTrack
StringKeyframeTrack
VectorKeyframeTrack
Some examples of how to manually create AnimationClips with different sorts of KeyframeTracks can be found in the AnimationClipCreator file.

Since explicit values are only specified for the discrete points of time stored in the times array, all values in between have to be interpolated.

The track's name is important for the connection of this track with a specific property of the animated node (done by PropertyBinding).

Constructor
KeyframeTrack( name : String, times : Array, values : Array, interpolation : Constant )
name - the identifier for the KeyframeTrack.
times - an array of keyframe times, converted internally to a Float32Array.
values - an array with the values related to the times array, converted internally to a Float32Array.
interpolation - the type of interpolation to use. See Animation Constants for possible values. Default is InterpolateLinear.

Properties
.name : String
The track's name can refer to morph targets or bones or possibly other values within an animated object. See PropertyBinding.parseTrackName for the forms of strings that can be parsed for property binding:

The name can specify the node either using its name or its uuid (although it needs to be in the subtree of the scene graph node passed into the mixer). Or, if the track name starts with a dot, the track applies to the root node that was passed into the mixer.

Usually after the node a property will be specified directly. But you can also specify a subproperty, such as .rotation[x], if you just want to drive the X component of the rotation via a float track.

You can also specify bones or multimaterials by using an object name, for example: .bones[R_hand].scale; the red channel of the diffuse color of the fourth material in a materials array - as a further example - can be accessed with .materials[3].diffuse[r].

PropertyBinding will also resolve morph target names, for example: .morphTargetInfluences[run].

Note: The track's name does not necessarily have to be unique. Multiple tracks can drive the same property. The result should be based on a weighted blend between the multiple tracks according to the weights of their respective actions.

.times : Float32Array
A Float32Array, converted from the times array which is passed in the constructor.

.values : Float32Array
A Float32Array, converted from the values array which is passed in the constructor.

.DefaultInterpolation : Constant
The default interpolation type: InterpolateLinear.

.TimeBufferType : Constant
Float32Array, the type of the buffer internally used for the times.

.ValueBufferType : Constant
Float32Array, the type of the buffer internally used for the values.

Methods
.clone () : KeyframeTrack
Returns a copy of this track.

.createInterpolant () : Interpolant
Creates a LinearInterpolant, CubicInterpolant or DiscreteInterpolant, depending on the value of the interpolation parameter passed in the constructor.

.getInterpolation () : Interpolant
Returns the interpolation type.

.getValueSize () : Number
Returns the size of each value (that is the length of the values array divided by the length of the times array).

.InterpolantFactoryMethodDiscrete ( result ) : DiscreteInterpolant
Creates a new DiscreteInterpolant from the times and values. A Float32Array can be passed which will receive the results. Otherwise a new array with the appropriate size will be created automatically.

.InterpolantFactoryMethodLinear ( result ) : LinearInterpolant
Creates a new LinearInterpolant from the times and values. A Float32Array can be passed which will receive the results. Otherwise a new array with the appropriate size will be created automatically.

.InterpolantFactoryMethodSmooth ( result ) : CubicInterpolant
Create a new CubicInterpolant from the times and values. A Float32Array can be passed which will receive the results. Otherwise a new array with the appropriate size will be created automatically.

.optimize () : this
Removes equivalent sequential keys, which are common in morph target sequences.

.scale () : this
Scales all keyframe times by a factor.

Note: This is useful, for example, for conversions to a certain rate of frames per seconds (as it is done internally by animationClip.CreateFromMorphTargetSequence).

.setInterpolation ( interpolationType : Constant ) : this
Sets the interpolation type. See Animation Constants for choices.

.shift ( timeOffsetInSeconds : Number ) : this
Moves all keyframes either forward or backward in time.

.trim ( startTimeInSeconds : Number, endTimeInSeconds : Number ) : this
Removes keyframes before startTime and after endTime, without changing any values within the range [startTime, endTime].

.validate () : Boolean
Performs minimal validation on the tracks. Returns true if valid.

This method logs errors to the console, if a track is empty, if the value size is not valid, if an item in the times or values array is not a valid number or if the items in the times array are out of order.

Static Methods
.toJSON ( track : KeyframeTrack ) : JSON
Converts the track to JSON.

Source
src/animation/KeyframeTrack.js

PropertyBinding
This holds a reference to a real property in the scene graph; used internally.

Constructor
PropertyBinding( rootNode : Object3D, path, parsedPath )
-- rootNode: -- path -- parsedPath (optional)

Properties
.path : Number
.parsedPath : Number
.node : Number
.rootNode : Number
.BindingType : Object
.Versioning : Object
.GetterByBindingType : Array
.SetterByBindingTypeAndVersioning : Array
Methods
.getValue ( targetArray : Array, offset : Number ) : undefined
.setValue ( sourceArray : Array, offset : Number ) : undefined
.bind ( ) : undefined
Create getter / setter pair for a property in the scene graph. Used internally by getValue and setValue.

.unbind ( ) : undefined
Unbind getter / setter pair for a property in the scene graph.

.Composite ( targetGroup, path, optionalParsedPath ) : Constructor
Create a new Composite PropertyBinding.

.create ( root, path, parsedPath ) : Constructor
Create a new Composite PropertyBinding (if root is an AnimationObjectGroup) or PropertyBinding.

.parseTrackName ( trackName ) : Constructor
Matches strings in the following forms:
-- nodeName.property
-- nodeName.property[accessor]
-- nodeName.material.property[accessor]
-- uuid.property[accessor]
-- uuid.objectName[objectIndex].propertyName[propertyIndex]
-- parentName/nodeName.property
-- parentName/parentName/nodeName.property[index]
-- .bone[Armature.DEF_cog].position
-- scene:helium_balloon_model:helium_balloon_model.position

.findNode ( root, nodeName ) : Constructor
Find a node in a node tree or Skeleton.

Source
src/animation/PropertyBinding.js

PropertyMixer
Buffered scene graph property that allows weighted accumulation; used internally.

Constructor
PropertyMixer( binding : PropertyBinding, typeName : String, valueSize : Number )
-- binding
-- typeName
-- valueSize

Properties
.binding : PropertyBinding
.buffer : TypedArray
Buffer with size valueSize * 4.

This has the layout: [ incoming | accu0 | accu1 | orig ]

Interpolators can use .buffer as their .result and the data then goes to 'incoming'. 'accu0' and 'accu1' are used frame-interleaved for the cumulative result and are compared to detect changes. 'orig' stores the original state of the property.

.cumulativeWeight : Number
Default is 0.

.cumulativeWeightAdditive : Number
Default is 0.

.valueSize : Number
.referenceCount : Number
Default is 0.

.useCount : Number
Default is 0.

Methods
.accumulate ( accuIndex : Number, weight : Number ) : undefined
Accumulate data in buffer[accuIndex] 'incoming' region into 'accu[i]'.
If weight is 0 this does nothing.

.accumulateAdditive ( weight : Number ) : undefined
Accumulate data in the 'incoming' region into 'add'.
If weight is 0 this does nothing.

.apply ( accuIndex : Number ) : undefined
Apply the state of buffer 'accu[i]' to the binding when accus differ.

.saveOriginalState ( ) : undefined
Remember the state of the bound property and copy it to both accus.

.restoreOriginalState ( ) : undefined
Apply the state previously taken via 'saveOriginalState' to the binding.

Source
src/animation/PropertyMixer.js