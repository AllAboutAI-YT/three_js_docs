Loader →
AnimationLoader
Class for loading AnimationClips in JSON format. This uses the FileLoader internally for loading files.

Code Example
// instantiate a loader
const loader = new THREE.AnimationLoader();

// load a resource
loader.load(
	// resource URL
	'animations/animation.js',

	// onLoad callback
	function ( animations ) {
		// animations is an array of AnimationClips
	},

	// onProgress callback
	function ( xhr ) {
		console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
	},

	// onError callback
	function ( err ) {
		console.log( 'An error happened' );
	}
);
Constructor
AnimationLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new AnimationLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — the path or URL to the file. This can also be a Data URI.
onLoad — Will be called when load completes. The argument will be the loaded animation clips.
onProgress (optional) — Will be called while load progresses. The argument will be the ProgressEvent instance, which contains .lengthComputable, .total and .loaded. If the server does not set the Content-Length header; .total will be 0.
onError (optional) — Will be called if load errors.

Begin loading from url and pass the loaded animation to onLoad.

.parse ( json : JSON ) : Array
json — required

Parse the JSON object and return an array of animation clips. Individual clips in the object will be parsed with AnimationClip.parse.

Source
src/loaders/AnimationLoader.js

Loader →
AudioLoader
Class for loading an AudioBuffer. This uses the FileLoader internally for loading files.

Code Example
// instantiate a listener
const audioListener = new THREE.AudioListener();

// add the listener to the camera
camera.add( audioListener );

// instantiate audio object
const oceanAmbientSound = new THREE.Audio( audioListener );

// add the audio object to the scene
scene.add( oceanAmbientSound );

// instantiate a loader
const loader = new THREE.AudioLoader();

// load a resource
loader.load(
	// resource URL
	'audio/ambient_ocean.ogg',

	// onLoad callback
	function ( audioBuffer ) {
		// set the audio object buffer to the loaded object
		oceanAmbientSound.setBuffer( audioBuffer );

		// play the audio
		oceanAmbientSound.play();
	},

	// onProgress callback
	function ( xhr ) {
		console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
	},

	// onError callback
	function ( err ) {
		console.log( 'An error happened' );
	}
);
Constructor
AudioLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new AudioLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — the path or URL to the file. This can also be a Data URI.
onLoad — Will be called when load completes. The argument will be the loaded text response.
onProgress (optional) — Will be called while load progresses. The argument will be the ProgressEvent instance, which contains .lengthComputable, .total and .loaded. If the server does not set the Content-Length header; .total will be 0.
onError (optional) — Will be called when load errors.

Begin loading from url and pass the loaded AudioBuffer to onLoad.

Source
src/loaders/AudioLoader.js

Loader →
BufferGeometryLoader
A loader for loading a BufferGeometry. This uses the FileLoader internally for loading files.

Code Example
// instantiate a loader
const loader = new THREE.BufferGeometryLoader();

// load a resource
loader.load(
	// resource URL
	'models/json/pressure.json',

	// onLoad callback
	function ( geometry ) {
		const material = new THREE.MeshLambertMaterial( { color: 0xF5F5F5 } );
		const object = new THREE.Mesh( geometry, material );
		scene.add( object );
	},

	// onProgress callback
	function ( xhr ) {
		console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
	},

	// onError callback
	function ( err ) {
		console.log( 'An error happened' );
	}
);
Constructor
BufferGeometryLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new BufferGeometryLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — the path or URL to the file. This can also be a Data URI.d
onLoad — Will be called when load completes. The argument will be the loaded BufferGeometry.
onProgress (optional) — Will be called while load progresses. The argument will be the ProgressEvent instance, which contains .lengthComputable, .total and .loaded. If the server does not set the Content-Length header; .total will be 0.
onError (optional) — Will be called when load errors.

Begin loading from url and call onLoad with the parsed response content.

.parse ( json : Object ) : BufferGeometry
json — The JSON structure to parse.

Parse a JSON structure and return a BufferGeometry.

Source
src/loaders/BufferGeometryLoader.js

Cache
A simple caching system, used internally by FileLoader.

Code Example
To enable caching across all loaders that use FileLoader, set

 THREE.Cache.enabled = true. 
Examples
WebGL / geometry / text
WebGL / interactive / instances / gpu
WebGL / loader / ttf

Properties
.enabled : Boolean
Whether caching is enabled. Default is false.

.files : Object
An object that holds cached files.

Methods
.add ( key : String, file : Object ) : undefined
key — the key to reference the cached file by.
file — The file to be cached.

Adds a cache entry with a key to reference the file. If this key already holds a file, it is overwritten.

.get ( key : String ) : Any
key — A string key

Get the value of key. If the key does not exist undefined is returned.

.remove ( key : String ) : undefined
key — A string key that references a cached file.

Remove the cached file associated with the key.

.clear () : undefined
Remove all values from the cache.

Source
src/loaders/Cache.js

Loader →
CompressedTextureLoader
Abstract base class for block based textures loader (dds, pvr, ...). This uses the FileLoader internally for loading files.

Examples
See the DDSLoader and PVRLoader for examples of derived classes.

Constructor
CompressedTextureLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new CompressedTextureLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : CompressedTexture
url — the path or URL to the file. This can also be a Data URI.
onLoad (optional) — Will be called when load completes. The argument will be the loaded texture.
onProgress (optional) — Will be called while load progresses. The argument will be the ProgressEvent instance, which contains .lengthComputable, .total and .loaded. If the server does not set the Content-Length header; .total will be 0.
onError (optional) — Will be called when load errors.

Begin loading from url and pass the loaded texture to onLoad. The method also returns a new texture object which can directly be used for material creation.

Source
src/loaders/CompressedTextureLoader.js

Loader →
CubeTextureLoader
CubeTextureLoader can be used to load cube maps. The loader returns an instance of CubeTexture and expects the cube map to be defined as six separate images representing the sides of a cube. Other cube map definitions like vertical and horizontal cross, column and row layouts are not supported.

The loaded CubeTexture is in sRGB color space. Meaning the colorSpace property is set to THREE.SRGBColorSpace by default.

Code Example
const scene = new THREE.Scene();
scene.background = new THREE.CubeTextureLoader()
	.setPath( 'textures/cubeMaps/' )
	.load( [
				'px.png',
				'nx.png',
				'py.png',
				'ny.png',
				'pz.png',
				'nz.png'
			] );
Examples
materials / cubemap
materials / cubemap / dynamic
materials / cubemap / refraction

Constructor
CubeTextureLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new CubeTextureLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( urls : String, onLoad : Function, onProgress : Function, onError : Function ) : CubeTexture
urls — array of 6 urls to images, one for each side of the CubeTexture. The urls should be specified in the following order: pos-x, neg-x, pos-y, neg-y, pos-z, neg-z. They can also be Data URIs.
Note that, by convention, cube maps are specified in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words, using a left-handed coordinate system. Since three.js uses a right-handed coordinate system, environment maps used in three.js will have pos-x and neg-x swapped.
onLoad (optional) — Will be called when load completes. The argument will be the loaded texture.
onProgress (optional) — This callback function is currently not supported.
onError (optional) — Will be called when load errors.

Begin loading from url and pass the loaded texture to onLoad. The method also returns a new texture object which can directly be used for material creation.

Source
src/loaders/CubeTextureLoader.js

Loader →
DataTextureLoader
Abstract base class to load generic binary textures formats (rgbe, hdr, ...). This uses the FileLoader internally for loading files, and creates a new DataTexture.

Examples
See the RGBELoader for an example of a derived class.

Constructor
DataTextureLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new DataTextureLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : DataTexture
url — the path or URL to the file. This can also be a Data URI.
onLoad (optional) — Will be called when load completes. The argument will be the loaded texture.
onProgress (optional) — Will be called while load progresses.The argument will be the ProgressEvent instance, which contains .lengthComputable, .total and .[page:Integer loaded]. If the server does not set the Content-Length header; .total will be 0.
onError (optional) — Will be called when load errors.

Begin loading from url and pass the loaded texture to onLoad. The method also returns a new texture object which can directly be used for material creation.

Source
src/loaders/DataTextureLoader.js

Loader →
FileLoader
A low level class for loading resources with Fetch, used internally by most loaders. It can also be used directly to load any file type that does not have a loader.

Code Example
const loader = new THREE.FileLoader();

//load a text file and output the result to the console
loader.load(
	// resource URL
	'example.txt',

	// onLoad callback
	function ( data ) {
		// output the text to the console
		console.log( data )
	},

	// onProgress callback
	function ( xhr ) {
		console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
	},

	// onError callback
	function ( err ) {
		console.error( 'An error happened' );
	}
);
*Note:* The cache must be enabled using
THREE.Cache.enabled = true;
This is a global property and only needs to be set once to be used by all loaders that use FileLoader internally. Cache is a cache module that holds the response from each request made through this loader, so each file is requested once.

Constructor
FileLoader ( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is DefaultLoadingManager.

Properties
See the base Loader class for common properties.

.mimeType : String
The expected mimeType. See .setMimeType. Default is undefined.

.responseType : String
The expected response type. See .setResponseType. Default is undefined.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — the path or URL to the file. This can also be a Data URI.
onLoad (optional) — Will be called when loading completes. The argument will be the loaded response.
onProgress (optional) — Will be called while load progresses. The argument will be the ProgressEvent instance, which contains .lengthComputable, .total and .loaded. If the server does not set the Content-Length header; .total will be 0.
onError (optional) — Will be called if an error occurs.

Load the URL and pass the response to the onLoad function.

.setMimeType ( mimeType : String ) : this
Set the expected mimeType of the file being loaded. Note that in many cases this will be determined automatically, so by default it is undefined.

.setResponseType ( responseType : String ) : this
Change the response type. Valid values are:
text or empty string (default) - returns the data as String.
arraybuffer - loads the data into a ArrayBuffer and returns that.
blob - returns the data as a Blob.
document - parses the file using the DOMParser.
json - parses the file using JSON.parse.

Source
src/loaders/FileLoader.js

Loader →
ImageBitmapLoader
A loader for loading an Image as an ImageBitmap. An ImageBitmap provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.
Unlike FileLoader, ImageBitmapLoader does not avoid multiple concurrent requests to the same URL.

Note that Texture.flipY and Texture.premultiplyAlpha with ImageBitmap are ignored. ImageBitmap needs these configuration on bitmap creation unlike regular images need them on uploading to GPU. You need to set the equivalent options via ImageBitmapLoader.setOptions instead. Refer to WebGL specification for the detail.

Code Example
// instantiate a loader
const loader = new THREE.ImageBitmapLoader();

// set options if needed
loader.setOptions( { imageOrientation: 'flipY' } );

// load a image resource
loader.load(
	// resource URL
	'image.png',

	// onLoad callback
	function ( imageBitmap ) {
		const texture = new THREE.CanvasTexture( imageBitmap );
		const material = new THREE.MeshBasicMaterial( { map: texture } );
	},

	// onProgress callback currently not supported
	undefined,

	// onError callback
	function ( err ) {
		console.log( 'An error happened' ); 
	}
);
Examples
WebGL / loader / ImageBitmap

Constructor
ImageBitmapLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new ImageBitmapLoader.

Properties
See the base Loader class for common properties.

.isImageBitmapLoader : Boolean
Read-only flag to check if a given object is of type ImageBitmapLoader.

.options : String
An optional object that sets options for the internally used createImageBitmap factory method. Default is undefined.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — the path or URL to the file. This can also be a Data URI.
onLoad — Will be called when load completes. The argument will be the loaded image.
onProgress (optional) — This callback function is currently not supported.
onError (optional) — Will be called when load errors.

Begin loading from url and return the image object that will contain the data.

.setOptions ( options : Object ) : this
Sets the options object for createImageBitmap.

Source
src/loaders/ImageBitmapLoader.js

Loader →
ImageLoader
A loader for loading an Image. This is used internally by the CubeTextureLoader, ObjectLoader and TextureLoader.

Code Example
// instantiate a loader
const loader = new THREE.ImageLoader();

// load a image resource
loader.load(
	// resource URL
	'image.png',

	// onLoad callback
	function ( image ) {
		// use the image, e.g. draw part of it on a canvas
		const canvas = document.createElement( 'canvas' );
		const context = canvas.getContext( '2d' );
		context.drawImage( image, 100, 100 );
	},

	// onProgress callback currently not supported
	undefined,

	// onError callback
	function () {
		console.error( 'An error happened.' );
	}
);
Please note three.js r84 dropped support for ImageLoader progress events. For an ImageLoader that supports progress events, see this thread.

Examples
WebGL / loader / obj
WebGL / shaders / ocean

Constructor
ImageLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new ImageLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : HTMLImageElement
url — the path or URL to the file. This can also be a Data URI.
onLoad — Will be called when load completes. The argument will be the loaded image.
onProgress (optional) — This callback function is currently not supported.
onError (optional) — Will be called when load errors.

Begin loading from url and return the image object that will contain the data.

Source
src/loaders/ImageLoader.js

Loader
Base class for implementing loaders.

Constructor
Loader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new Loader.

Properties
.crossOrigin : String
The crossOrigin string to implement CORS for loading the url from a different domain that allows CORS. Default is anonymous.

.withCredentials : Boolean
Whether the XMLHttpRequest uses credentials. See .setWithCredentials. Default is false.

.manager : LoadingManager
The loadingManager the loader is using. Default is DefaultLoadingManager.

.path : String
The base path from which the asset will be loaded. Default is the empty string.

.resourcePath : String
The base path from which additional resources like textures will be loaded. Default is the empty string.

.requestHeader : Object
The request header used in HTTP request. See .setRequestHeader. Default is empty object.

Methods
.load () : undefined
This method needs to be implemented by all concrete loaders. It holds the logic for loading the asset from the backend.

.loadAsync ( url : String, onProgress : Function ) : Promise
url — A string containing the path/URL of the file to be loaded.
onProgress (optional) — A function to be called while the loading is in progress. The argument will be the ProgressEvent instance, which contains .lengthComputable, .total and .loaded. If the server does not set the Content-Length header; .total will be 0.

This method is equivalent to .load, but returns a Promise.

onLoad is handled by Promise.resolve and onError is handled by Promise.reject.

.parse () : undefined
This method needs to be implemented by all concrete loaders. It holds the logic for parsing the asset into three.js entities.

.setCrossOrigin ( crossOrigin : String ) : this
crossOrigin — The crossOrigin string to implement CORS for loading the url from a different domain that allows CORS.

.setWithCredentials ( value : Boolean ) : this
Whether the XMLHttpRequest uses credentials such as cookies, authorization headers or TLS client certificates. See XMLHttpRequest.withCredentials.
Note that this has no effect if you are loading files locally or from the same domain.

.setPath ( path : String ) : this
path — Set the base path for the asset.

.setResourcePath ( resourcePath : String ) : this
resourcePath — Set the base path for dependent resources like textures.

.setRequestHeader ( requestHeader : Object ) : this
requestHeader - key: The name of the header whose value is to be set. value: The value to set as the body of the header.

Set the request header used in HTTP request.

Source
src/loaders/Loader.js

LoaderUtils
An object with several loader utility functions.

Functions
.decodeText ( array : TypedArray ) : String
array — A stream of bytes as a typed array.

The function takes a stream of bytes as input and returns a string representation.

.extractUrlBase ( url : String ) : String
url — The url to extract the base url from.

Extract the base from the URL.

.resolveURL ( url : String, path : String ) : String
url — The absolute or relative url resolve. path — The base path for relative urls to be resolved against.

Resolves relative urls against the given path. Absolute paths, data urls, and blob urls will be returned as is. Invalid urls will return an empty string.

Source
src/loaders/LoaderUtils.js

Loader →
MaterialLoader
A loader for loading a Material in JSON format. This uses the FileLoader internally for loading files.

Code Example
// instantiate a loader
const loader = new THREE.MaterialLoader();

// load a resource
loader.load(
	// resource URL
	'path/to/material.json',

	// onLoad callback
	function ( material ) {
		object.material = material;
	},

	// onProgress callback
	function ( xhr ) {
		console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
	},

	// onError callback
	function ( err ) {
		console.log( 'An error happened' );
	}
);
Constructor
MaterialLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new MaterialLoader.

Properties
See the base Loader class for common properties.

.textures : Object
Object holding any textures used by the material. See .setTextures.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — the path or URL to the file. This can also be a Data URI.
onLoad — Will be called when load completes. The argument will be the loaded Material.
onProgress (optional) — Will be called while load progresses. The argument will be the ProgressEvent instance, which contains .lengthComputable, .total and .loaded. If the server does not set the Content-Length header; .total will be 0.
onError (optional) — Will be called when load errors.

Begin loading from url.

.parse ( json : Object ) : Material
json — The json object containing the parameters of the Material.

Parse a JSON structure and create a new Material of the type json.type with parameters defined in the json object.

.setTextures ( textures : Object ) : this
textures — object containing any textures used by the material.

Source
src/loaders/MaterialLoader.js

Loader →
ObjectLoader
A loader for loading a JSON resource in the JSON Object/Scene format.

This uses the FileLoader internally for loading files.

Code Example
const loader = new THREE.ObjectLoader();

loader.load(
	// resource URL
	"models/json/example.json",

	// onLoad callback
	// Here the loaded data is assumed to be an object
	function ( obj ) {
		// Add the loaded object to the scene
		scene.add( obj );
	},

	// onProgress callback
	function ( xhr ) {
		console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
	},

	// onError callback
	function ( err ) {
		console.error( 'An error happened' );
	}
);


// Alternatively, to parse a previously loaded JSON structure
const object = loader.parse( a_json_object );

scene.add( object );
Examples
WebGL / materials / lightmap

Constructor
ObjectLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new ObjectLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — the path or URL to the file. This can also be a Data URI.
onLoad — Will be called when load completes. The argument will be the loaded object.
onProgress (optional) — Will be called while load progresses. The argument will be the ProgressEvent instance, which contains .lengthComputable, .total and .loaded. If the server does not set the Content-Length header; .total will be 0.
onError (optional) — Will be called when load errors.

Begin loading from url and call onLoad with the parsed response content.

.parse ( json : Object, onLoad : Function ) : Object3D
json — required. The JSON source to parse.

onLoad — Will be called when parsed completes. The argument will be the parsed object.

Parse a JSON structure and return a three.js object. This is used internally by .load() but can also be used directly to parse a previously loaded JSON structure.

.parseGeometries ( json : Object ) : Object
json — required. The JSON source to parse.

This is used by .parse() to parse any geometries in the JSON structure.

.parseMaterials ( json : Object ) : Object
json — required. The JSON source to parse.

This is used by .parse() to parse any materials in the JSON structure using MaterialLoader.

.parseAnimations ( json : Object ) : Object
json — required. The JSON source to parse.

This is used by .parse() to parse any animations in the JSON structure, using AnimationClip.parse().

.parseImages ( json : Object ) : Object
json — required. The JSON source to parse.

This is used by .parse() to parse any images in the JSON structure, using ImageLoader.

.parseTextures ( json : Object ) : Object
json — required. The JSON source to parse.

This is used by .parse() to parse any textures in the JSON structure.

.parseObject ( json : Object, geometries : BufferGeometry, materials : Material, animations : AnimationClip ) : Object3D
json — required. The JSON source to parse.
geometries — required. The geometries of the JSON.
materials — required. The materials of the JSON.
animations — required. The animations of the JSON.

This is used by .parse() to parse any 3D objects in the JSON structure.

Source
src/loaders/ObjectLoader.js

Loader →
TextureLoader
Class for loading a texture. This uses the ImageLoader internally for loading files.

Code Example
const texture = new THREE.TextureLoader().load('textures/land_ocean_ice_cloud_2048.jpg' ); 
// immediately use the texture for material creation 

const material = new THREE.MeshBasicMaterial( { map:texture } );
Code Example with Callbacks
// instantiate a loader
const loader = new THREE.TextureLoader();

// load a resource
loader.load(
	// resource URL
	'textures/land_ocean_ice_cloud_2048.jpg',

	// onLoad callback
	function ( texture ) {
		// in this example we create the material when the texture is loaded
		const material = new THREE.MeshBasicMaterial( {
			map: texture
		 } );
	},

	// onProgress callback currently not supported
	undefined,

	// onError callback
	function ( err ) {
		console.error( 'An error happened.' );
	}
);
Please note three.js r84 dropped support for TextureLoader progress events. For a TextureLoader that supports progress events, see this thread.

Examples
geometry / cube

Constructor
TextureLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new TextureLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : Texture
url — the path or URL to the file. This can also be a Data URI.
onLoad (optional) — Will be called when load completes. The argument will be the loaded texture.
onProgress (optional) — This callback function is currently not supported.
onError (optional) — Will be called when load errors.

Begin loading from the given URL and pass the fully loaded texture to onLoad. The method also returns a new texture object which can directly be used for material creation. If you do it this way, the texture may pop up in your scene once the respective loading process is finished.

Source
src/loaders/TextureLoader.js

