Loader →
3DMLoader
A loader for Rhinoceros 3d files and objects.

Rhinoceros is a 3D modeler used to create, edit, analyze, document, render, animate, and translate NURBS curves, surfaces, breps, extrusions, point clouds, as well as polygon meshes and SubD objects. rhino3dm.js is compiled to WebAssembly from the open source geometry library openNURBS. The loader currently uses rhino3dm.js 8.4.0.

Import
3DMLoader is an add-on, and must be imported explicitly. See Installation / Addons.

import { Rhino3dmLoader } from 'three/addons/loaders/3DMLoader.js';
Supported Conversions
The 3DMLoader converts Rhino objects to the following three.js types:

3dm type	three.js type
Point	Points
PointSet / PointCloud	Points
TextDot	Sprite
Curve	Line 1
Mesh	Mesh
Extrusion	Mesh 2
BREP	Mesh 2
SubD	Mesh 3
InstanceReferences	Object3D
DirectionalLight	DirectionalLight
PointLight	PointLight
RectangularLight	RectAreaLight
SpotLight	SpotLight
File3dm	Object3D 4
Material / Physically Based Material	MeshPhysicalMaterial
Notes:
1 NURBS curves are discretized to a hardcoded resolution.

2 Types which are based on BREPs and NURBS surfaces are represented with their "Render Mesh". Render meshes might not be associated with these objects if they have not been displayed in an appropriate display mode in Rhino (i.e. "Shaded", "Rendered", etc), or are created programmatically, for example, via Grasshopper or directly with the rhino3dm library. As of rhino3dm.js@8.0.0-beta2, BrepFace and Extrusions can be assigned a mesh representation, but these must be generated by the user.

3 SubD objects are represented by subdividing their control net.

4 Whether a Rhino Document (File3dm) is loaded or parsed, the returned object is an Object3D with all Rhino objects (File3dmObject) as children. File3dm layers and other file level properties are added to the resulting object's userData.

5 All resulting three.js objects have useful properties from the Rhino object (i.e. layer index, name, etc.) populated in their userData object.

6 Rhino and Three.js have a different coordinate system. Upon import, you should rotate the resulting Object3D by -90º in x or set the THREE.Object3D.DEFAULT_UP at the beginning of your application:
THREE.Object3D.DEFAULT_UP.set( 0, 0, 1 );
Keep in mind that this will affect the orientation of all of the Object3Ds in your application.

Examples
webgl_loader_3dm

Constructor
Rhino3dmLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new Rhino3dmLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : Object3D
url — A string containing the path/URL of the .3dm file.
onLoad — A function to be called after the loading is successfully completed.
onProgress — (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .total and .loaded bytes. If the server does not set the Content-Length header; .total will be 0.
onError — (optional) A function to be called if an error occurs during loading. The function receives error as an argument.

Begin loading from url and call the onLoad function with the resulting Object3d.

// Instantiate a loader
const loader = new Rhino3dmLoader();
	
// Specify path to a folder containing WASM/JS libraries or a CDN.
// For example, /jsm/libs/rhino3dm/ is the location of the library inside the three.js repository
// loader.setLibraryPath( '/path_to_library/rhino3dm/' );
loader.setLibraryPath( 'https://cdn.jsdelivr.net/npm/rhino3dm@8.4.0/' );
	
// Load a 3DM file
loader.load(
	// resource URL
	'model.3dm',
	// called when the resource is loaded
	function ( object ) {
	
		scene.add( object );
	
	},
	// called as loading progresses
	function ( xhr ) {
	
		console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );
	
	},
	// called when loading has errors
	function ( error ) {
	
		console.log( 'An error happened' );
	
	}
);
.parse ( buffer : ArrayBuffer, onLoad : Function, onProgress : Function, onError : Function ) : Object3D
buffer — An ArrayBuffer representing the Rhino File3dm document.
onLoad — A function to be called after the loading is successfully completed.
onError — (optional) A function to be called if an error occurs during loading. The function receives error as an argument.

Parse a File3dm ArrayBuffer and call the onLoad function with the resulting Object3d. See this example for further reference.

import rhino3dm from 'https://cdn.jsdelivr.net/npm/rhino3dm@8.4.0'

// Instantiate a loader
const loader = new Rhino3dmLoader();

// Specify path to a folder containing WASM/JS libraries or a CDN.
loader.setLibraryPath( 'https://cdn.jsdelivr.net/npm/rhino3dm@8.4.0' );

const rhino = await rhino3dm();
console.log('Loaded rhino3dm.');

// create Rhino Document and add a point to it
const doc = new rhino.File3dm();
const ptA = [0, 0, 0];
const point = new rhino.Point( ptA );
doc.objects().add( point, null );

// create a copy of the doc.toByteArray data to get an ArrayBuffer
const buffer = new Uint8Array( doc.toByteArray() ).buffer;

loader.parse( buffer, function ( object ) {

	scene.add( object );

} );
.setLibraryPath ( value : String ) : this
value — Path to folder containing the JS and WASM libraries.

// Instantiate a loader
const loader = new Rhino3dmLoader();

// Specify path to a folder containing the WASM/JS library:
loader.setLibraryPath( '/path_to_library/rhino3dm/' );
// or from a CDN:
loader.setLibraryPath( 'https://cdn.jsdelivr.net/npm/rhino3dm@8.4.0' );
.setWorkerLimit ( workerLimit : Number ) : this
workerLimit - Maximum number of workers to be allocated. Default is 4.

Sets the maximum number of Web Workers to be used during decoding. A lower limit may be preferable if workers are also for other tasks in the application.

.dispose () : this
Disposes of the loader resources and deallocates memory.

Source
examples/jsm/loaders/3DMLoader.js

Loader →
DRACOLoader
A loader for geometry compressed with the Draco library.

Draco is an open source library for compressing and decompressing 3D meshes and point clouds. Compressed geometry can be significantly smaller, at the cost of additional decoding time on the client device.

Standalone Draco files have a .drc extension, and contain vertex positions, normals, colors, and other attributes. Draco files do not contain materials, textures, animation, or node hierarchies – to use these features, embed Draco geometry inside of a glTF file. A normal glTF file can be converted to a Draco-compressed glTF file using glTF-Pipeline. When using Draco with glTF, an instance of DRACOLoader will be used internally by GLTFLoader.

It is recommended to create one DRACOLoader instance and reuse it to avoid loading and creating multiple decoder instances.

Import
DRACOLoader is an add-on, and must be imported explicitly. See Installation / Addons.

import { DRACOLoader } from 'three/addons/loaders/DRACOLoader.js';
Code Example
// Instantiate a loader
const loader = new DRACOLoader();

// Specify path to a folder containing WASM/JS decoding libraries.
loader.setDecoderPath( '/examples/jsm/libs/draco/' );

// Optional: Pre-fetch Draco WASM/JS module.
loader.preload();

// Load a Draco geometry
loader.load(
	// resource URL
	'model.drc',
	// called when the resource is loaded
	function ( geometry ) {

		const material = new THREE.MeshStandardMaterial( { color: 0x606060 } );
		const mesh = new THREE.Mesh( geometry, material );
		scene.add( mesh );

	},
	// called as loading progresses
	function ( xhr ) {

		console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

	},
	// called when loading has errors
	function ( error ) {

		console.log( 'An error happened' );

	}
);
Examples
webgl_loader_draco

Browser compatibility
DRACOLoader will automatically use either the JS or the WASM decoding library, based on browser capabilities.


Constructor
DRACOLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new DRACOLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — A string containing the path/URL of the .drc file.
onLoad — A function to be called after the loading is successfully completed.
onProgress — (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .total and .loaded bytes. If the server does not set the Content-Length header; .total will be 0.
onError — (optional) A function to be called if an error occurs during loading. The function receives error as an argument.

Begin loading from url and call the onLoad function with the decompressed geometry.

.setDecoderPath ( value : String ) : this
value — Path to folder containing the JS and WASM decoder libraries.

.setDecoderConfig ( config : Object ) : this
config.type - (Optional) "js" or "wasm".

Provides configuration for the decoder libraries. Configuration cannot be changed after decoding begins.

.setWorkerLimit ( workerLimit : Number ) : this
workerLimit - Maximum number of workers to be allocated. Default is 4.

Sets the maximum number of Web Workers to be used during decoding. A lower limit may be preferable if workers are also for other tasks in the application.

.preload () : this
Requests the decoder libraries, if not already loaded.

.dispose () : this
Disposes of the decoder resources and deallocates memory. The decoder cannot be reloaded afterward.

Source
examples/jsm/loaders/DRACOLoader.js

Loader →
FontLoader
Class for loading a font in JSON format. Returns a font, which is an array of Shapes representing the font. This uses the FileLoader internally for loading files.

You can convert fonts online using facetype.js

Import
FontLoader is an add-on, and must be imported explicitly. See Installation / Addons.

import { FontLoader } from 'three/addons/loaders/FontLoader.js';
Code Example
const loader = new FontLoader();
const font = loader.load(
	// resource URL
	'fonts/helvetiker_bold.typeface.json',

	// onLoad callback
	function ( font ) {
		// do something with the font
		console.log( font );
	},

	// onProgress callback
	function ( xhr ) {
		console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
	},

	// onError callback
	function ( err ) {
		console.log( 'An error happened' );
	}
);
Examples
geometry / text / shapes
geometry / text

Constructor
FontLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new FontLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — the path or URL to the file. This can also be a Data URI.
onLoad — Will be called when load completes. The argument will be the loaded font.
onProgress — Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .total and .loaded bytes. If the server does not set the Content-Length header; .total will be 0.
onError — Will be called when load errors.

Begin loading from url and pass the loaded font to onLoad.

.parse ( json : Object ) : Font
json — The JSON structure to parse.

Parse a JSON structure and return a font.

Source
examples/jsm/loaders/FontLoader.js

Loader →
GLTFLoader
A loader for glTF 2.0 resources.

glTF (GL Transmission Format) is an open format specification for efficient delivery and loading of 3D content. Assets may be provided either in JSON (.gltf) or binary (.glb) format. External files store textures (.jpg, .png) and additional binary data (.bin). A glTF asset may deliver one or more scenes, including meshes, materials, textures, skins, skeletons, morph targets, animations, lights, and/or cameras.

GLTFLoader uses ImageBitmapLoader whenever possible. Be advised that image bitmaps are not automatically GC-collected when they are no longer referenced, and they require special handling during the disposal process. More information in the How to dispose of objects guide.

Import
GLTFLoader is an add-on, and must be imported explicitly. See Installation / Addons.

import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
Extensions
GLTFLoader supports the following glTF 2.0 extensions:

KHR_draco_mesh_compression
KHR_materials_clearcoat
KHR_materials_dispersion
KHR_materials_ior
KHR_materials_specular
KHR_materials_transmission
KHR_materials_iridescence
KHR_materials_unlit
KHR_materials_volume
KHR_mesh_quantization
KHR_lights_punctual
KHR_texture_basisu
KHR_texture_transform
EXT_texture_webp
EXT_meshopt_compression
EXT_mesh_gpu_instancing
The following glTF 2.0 extension is supported by an external user plugin

KHR_materials_variants1
MSFT_texture_dds
1You can also manually process the extension after loading in your application. See Three.js glTF materials variants example.

Code Example
// Instantiate a loader
const loader = new GLTFLoader();

// Optional: Provide a DRACOLoader instance to decode compressed mesh data
const dracoLoader = new DRACOLoader();
dracoLoader.setDecoderPath( '/examples/jsm/libs/draco/' );
loader.setDRACOLoader( dracoLoader );

// Load a glTF resource
loader.load(
	// resource URL
	'models/gltf/duck/duck.gltf',
	// called when the resource is loaded
	function ( gltf ) {

		scene.add( gltf.scene );

		gltf.animations; // Array<THREE.AnimationClip>
		gltf.scene; // THREE.Group
		gltf.scenes; // Array<THREE.Group>
		gltf.cameras; // Array<THREE.Camera>
		gltf.asset; // Object

	},
	// called while loading is progressing
	function ( xhr ) {

		console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

	},
	// called when loading has errors
	function ( error ) {

		console.log( 'An error happened' );

	}
);
Examples
webgl_loader_gltf

Textures
When loading textures externally (e.g., using TextureLoader) and applying them to a glTF model, textures must be configured. Textures referenced from the glTF model are configured automatically by GLTFLoader.

// If texture is used for color information (.map, .emissiveMap, .specularMap, ...), set color space
texture.colorSpace = THREE.SRGBColorSpace;

// UVs use the convention that (0, 0) corresponds to the upper left corner of a texture.
texture.flipY = false;
Custom extensions
Metadata from unknown extensions is preserved as “.userData.gltfExtensions” on Object3D, Scene, and Material instances, or attached to the response “gltf” object. Example:

loader.load('foo.gltf', function ( gltf ) {

	const scene = gltf.scene;

	const mesh = scene.children[ 3 ];

	const fooExtension = mesh.userData.gltfExtensions.EXT_foo;

	gltf.parser.getDependency( 'bufferView', fooExtension.bufferView )
		.then( function ( fooBuffer ) { ... } );

} );

Constructor
GLTFLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new GLTFLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — A string containing the path/URL of the .gltf or .glb file.
onLoad — A function to be called after the loading is successfully completed. The function receives the loaded JSON response returned from parse.
onProgress — (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .total and .loaded bytes. If the server does not set the Content-Length header; .total will be 0.
onError — (optional) A function to be called if an error occurs during loading. The function receives error as an argument.

Begin loading from url and call the callback function with the parsed response content.

.setDRACOLoader ( dracoLoader : DRACOLoader ) : this
dracoLoader — Instance of DRACOLoader, to be used for decoding assets compressed with the KHR_draco_mesh_compression extension.

Refer to this readme for the details of Draco and its decoder.

.setKTX2Loader ( ktx2Loader : KTX2Loader ) : this
ktx2Loader — Instance of KTX2Loader, to be used for loading KTX2 compressed textures.

.parse ( data : ArrayBuffer, path : String, onLoad : Function, onError : Function ) : undefined
data — glTF asset to parse, as an ArrayBuffer, JSON string or object.
path — The base path from which to find subsequent glTF resources such as textures and .bin data files.
onLoad — A function to be called when parse completes.
onError — (optional) A function to be called if an error occurs during parsing. The function receives error as an argument.

Parse a glTF-based ArrayBuffer, JSON string or object and fire onLoad callback when complete. The argument to onLoad will be an Object that contains loaded parts: .scene, .scenes, .cameras, .animations, and .asset.

Source
examples/jsm/loaders/GLTFLoader.js

Loader →
KTX2Loader
Loader for KTX 2.0 GPU Texture containers.

KTX 2.0 is a container format for various GPU texture formats. The loader supports Basis Universal GPU textures, which can be quickly transcoded to a wide variety of GPU texture compression formats. While KTX 2.0 also allows other hardware-specific formats, this loader does not yet parse them.

This loader parses the KTX 2.0 container and transcodes to a supported GPU compressed texture format. The required WASM transcoder and JS wrapper are available from the examples/jsm/libs/basis directory.

Import
KTX2Loader is an add-on, and must be imported explicitly. See Installation / Addons.

import { KTX2Loader } from 'three/addons/loaders/KTX2Loader.js';
Code Example
var ktx2Loader = new KTX2Loader();
ktx2Loader.setTranscoderPath( 'examples/jsm/libs/basis/' );
ktx2Loader.detectSupport( renderer );
ktx2Loader.load( 'diffuse.ktx2', function ( texture ) {

	var material = new THREE.MeshStandardMaterial( { map: texture } );

}, function () {

	console.log( 'onProgress' );

}, function ( e ) {

	console.error( e );

} );
Examples
webgl_loader_texture_ktx2

Browser compatibility
This loader relies on Web Assembly which is not supported in older browsers.


Constructor
KTX2Loader( manager : LoadingManager )
manager — The LoadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new KTX2Loader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : CompressedTexture
url — A string containing the path/URL of the .ktx2 file.
onLoad — A function to be called after the loading is successfully completed.
onProgress — (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .total and .loaded bytes. If the server does not set the Content-Length header; .total will be 0.
onError — (optional) A function to be called if an error occurs during loading. The function receives error as an argument.

Load from url and call the onLoad function with the transcoded CompressedTexture.

.detectSupport ( renderer : WebGLRenderer ) : this
renderer — A renderer instance.

Detects hardware support for available compressed texture formats, to determine the output format for the transcoder. Must be called before loading a texture.

.setTranscoderPath ( path : String ) : this
path — Path to folder containing the WASM transcoder and JS wrapper.

The WASM transcoder and JS wrapper are available from the examples/jsm/libs/basis directory.

.setWorkerLimit ( limit : Number ) : this
limit — Maximum number of workers. Default is '4'.

Sets the maximum number of web workers to be allocated by this instance.

.dispose () : this
Disposes the loader object, de-allocating any Web Workers created.

Source
examples/jsm/loaders/KTX2Loader.js

Loader →
LDrawLoader
A loader for LDraw resources.

LDraw (LEGO Draw) is an open format specification for describing LEGO and other construction set 3D models.

An LDraw asset (a text file usually with extension .ldr, .dat or .txt) can describe just a single construction piece, or an entire model. In the case of a model the LDraw file can reference other LDraw files, which are loaded from a library path set with setPartsLibraryPath. You usually download the LDraw official parts library, extract to a folder and point setPartsLibraryPath to it.

Library parts will be loaded by trial and error in subfolders 'parts', 'p' and 'models'. These file accesses are not optimal for web environment, so a script tool has been made to pack an LDraw file with all its dependencies into a single file, which loads much faster. See section 'Packing LDraw models'. The LDrawLoader example loads several packed files. The official parts library is not included due to its large size.

Import
LDrawLoader is an add-on, and must be imported explicitly. See Installation / Addons.

import { LDrawLoader } from 'three/addons/loaders/LDrawLoader.js';
Extensions
LDrawLoader supports the following extensions:

!COLOUR: Color and surface finish declarations.
BFC: Back Face Culling specification.
!CATEGORY: Model/part category declarations.
!KEYWORDS: Model/part keywords declarations.
Code Example
// Instantiate a loader
const loader = new LDrawLoader();

// Optionally set library parts path
// loader.setPartsLibraryPath( path to library );

// Load a LDraw resource
loader.load(
	// resource URL
	'models/car.ldr_Packed.mpd',
	// called when the resource is loaded
	function ( group ) {

		// Optionally, use LDrawUtils.mergeObject() from
		// 'examples/jsm/utils/LDrawUtils.js' to merge all
		// geometries by material (it gives better runtime
		// performance, but building steps are lost)
		// group = LDrawUtils.mergeObject( group );

		scene.add( group );

	},
	// called while loading is progressing
	function ( xhr ) {

		console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

	},
	// called when loading has errors
	function ( error ) {

		console.log( 'An error happened' );

	}
);
Examples
webgl_loader_ldraw

Packing LDraw models
To pack a model with all its referenced files, download the Official LDraw parts library and use the following Node script: utils/packLDrawModel.js It contains instructions on how to setup the files and execute it.

Metadata in .userData
LDrawLoader returns a Group object which contains an object hierarchy. Depending of each subobject type, its .userData member will contain the following members:
In a Group, the userData member will contain:

.numBuildingSteps: Only in the root Group, Indicates total number of building steps in the model. These can be used to set visibility of objects to show different building steps, which is done in the example.
.buildingStep: Indicates the building index of this step.
.category: Contains, if not null, the String category for this piece or model.
.keywords: Contains, if not null, an array of String keywords for this piece or model.
In a Material, the userData member will contain:

.code: Indicates the LDraw code for this material.
.edgeMaterial: Only in a Mesh material, indicates the LineBasicMaterial belonging to edges of the same color code (in the LDraw format, each surface material is also related to an edge material)
.conditionalEdgeMaterial: Only in a LineSegments material, indicates the Material belonging to conditional edges of the same color code.

Constructor
LDrawLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new LDrawLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — A string containing the path/URL of the LDraw file.
onLoad — A function to be called after the loading is successfully completed. The function receives the loaded JSON response returned from parse.
onProgress — (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .total and .loaded bytes. If the server does not set the Content-Length header; .total will be 0.
onError — (optional) A function to be called if an error occurs during loading. The function receives error as an argument.

Begin loading from url and call the callback function with the parsed response content.

.setPartsLibraryPath ( path : String ) : this
path — Path to library parts files to load referenced parts from. This is different from Loader.setPath, which indicates the path to load the main asset from.

This method must be called prior to .load unless the model to load does not reference library parts (usually it will be a model with all its parts packed in a single file)

.setFileMap ( fileMap : Map ) : this
map — Set a map from String to String which maps referenced library filenames to new filenames. If a fileMap is not specified (the default), library parts will be accessed by trial and error in subfolders 'parts', 'p' and 'models'.

.parse ( text : String, path : String, onLoad : Function, onError : Function ) : undefined
text — LDraw asset to parse, as string.
path — The base path from which to find other referenced LDraw asset files.
onLoad — A function to be called when parse completes.

Parse a LDraw file contents as a String and fire onLoad callback when complete. The argument to onLoad will be an Group that contains hierarchy of Group, Mesh and LineSegments (with other part data in .userData fields).

.getMaterial ( colourCode : String ) : Material
colourCode — Color code to get the associated Material.

.getMainMaterial () : String
Returns the Material for the main LDraw color.

For an already loaded LDraw asset, returns the Material associated with the main color code. This method can be useful to modify the main material of a model or part that exposes it.

The main color code is the standard way to color an LDraw part. It is '16' for triangles and '24' for edges. Usually a complete model will not expose the main color (that is, no part uses the code '16' at the top level, because they are assigned other specific colors) An LDraw part file on the other hand will expose the code '16' to be colored, and can have additional fixed colors.

.getMainEdgeMaterial () : String
Returns the Material for the edges main LDraw color.

.preloadMaterials ( path : String ) : void
path — Path of the LDraw materials asset.

This async method preloads materials from a single LDraw file. In the official parts library there is a special file which is loaded always the first (LDConfig.ldr) and contains all the standard color codes. This method is intended to be used with not packed files, for example in an editor where materials are preloaded and parts are loaded on demand.

Source
examples/jsm/loaders/LDrawLoader.js

Loader →
LUT3dlLoader
A 3D LUT loader that supports the .3dl file format.
Based on the following references:

[link:http://download.autodesk.com/us/systemdocs/help/2011/lustre/index.html?url=./files/WSc4e151a45a3b785a24c3d9a411df9298473-7ffd.htm,topicNumber=d0e9492]
[link:https://community.foundry.com/discuss/topic/103636/format-spec-for-3dl?mode=Post&postID=895258]
Import
LUT3dlLoader is an add-on, and must be imported explicitly. See Installation / Addons.

import { LUT3dlLoader } from 'three/addons/loaders/LUT3dlLoader.js';
Constructor
LUT3dlLoader( manager : LoadingManager )
manager — The LoadingManager to use. Defaults to DefaultLoadingManager

Creates a new LUT3dlLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — A string containing the path/URL of the .3dl file.
onLoad — (optional) A function to be called after the loading is successfully completed. The function receives the result of the parse method.
onProgress — (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, which contains total and loaded bytes. If the server does not set the Content-Length header; .total will be 0.
onError — (optional) A function to be called if an error occurs during loading. The function receives the error as an argument.

Begin loading from url and return the loaded LUT.

.parse ( input : String ) : Object
input — The 3dl data string.

Parse a 3dl data string and fire onLoad callback when complete. The argument to onLoad will be an object containing the following LUT data: .size, .texture and .texture3D.

.setType ( type : Number ) : this
type - The texture type. See the texture constants page for details.

Sets the desired texture type. Only THREE.UnsignedByteType and THREE.FloatType are supported. The default is THREE.UnsignedByteType.

Source
examples/jsm/loaders/LUT3dlLoader.js

Loader →
LUTCubeLoader
A 3D LUT loader that supports the .cube file format.
Based on the following reference:

https://wwwimages2.adobe.com/content/dam/acom/en/products/speedgrade/cc/pdfs/cube-lut-specification-1.0.pdf
Import
LUTCubeLoader is an add-on, and must be imported explicitly. See Installation / Addons.

import { LUTCubeLoader } from 'three/addons/loaders/LUTCubeLoader.js';
Constructor
LUTCubeLoader( manager : LoadingManager )
manager — The LoadingManager to use. Defaults to DefaultLoadingManager

Creates a new LUTCubeLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — A string containing the path/URL of the .cube file.
onLoad — (optional) A function to be called after the loading is successfully completed. The function receives the result of the parse method.
onProgress — (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, which contains total and loaded bytes. If the server does not set the Content-Length header; .total will be 0.
onError — (optional) A function to be called if an error occurs during loading. The function receives the error as an argument.

Begin loading from url and return the loaded LUT.

.parse ( input : String ) : Object
input — The cube data string.

Parse a cube data string and fire onLoad callback when complete. The argument to onLoad will be an object containing the following LUT data: .title, .size, .domainMin, .domainMax, .texture and .texture3D.

.setType ( type : Number ) : this
type - The texture type. See the texture constants page for details.

Sets the desired texture type. Only THREE.UnsignedByteType and THREE.FloatType are supported. The default is THREE.UnsignedByteType.

Source
examples/jsm/loaders/LUTCubeLoader.js

Loader →
MTLLoader
A loader for loading an .mtl resource, used internally by OBJLoader.
The Material Template Library format (MTL) or .MTL File Format is a companion file format to .OBJ that describes surface shading (material) properties of objects within one or more .OBJ files.

Import
MTLLoader is an add-on, and must be imported explicitly. See Installation / Addons.

import { MTLLoader } from 'three/addons/loaders/MTLLoader.js';
Constructor
MTLLoader( loadingManager : LoadingManager )
loadingManager — LoadingManager to use. Defaults to DefaultLoadingManager

Creates a new MTLLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — A string containing the path/URL of the .mtl file.
onLoad — (optional) A function to be called after the loading is successfully completed. The function receives the loaded MTLLoader.MaterialCreator instance.
onProgress — (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, which contains total and loaded bytes. If the server does not set the Content-Length header; .total will be 0.
onError — (optional) A function to be called if an error occurs during loading. The function receives the error as an argument.

Begin loading from url and return the loaded material.

.setMaterialOptions ( options : Object ) : this
options — required

side: Which side to apply the material. THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide
wrap: What type of wrapping to apply for textures. THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping
normalizeRGB: RGBs need to be normalized to 0-1 from 0-255. Default: false, assumed to be already normalized
ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's. Default: false
invertTrProperty: Use values 1 of Tr field for fully opaque. This option is useful for obj exported from 3ds MAX, vcglib or meshlab. Default: false
Set of options on how to construct the materials

.parse ( [param:String text, param:String path] ) : MTLLoaderMaterialCreator
text — The textual mtl structure to parse. path — The path to the MTL file.

Parse a mtl text structure and return a MTLLoader.MaterialCreator instance.

Source
examples/jsm/loaders/MTLLoader.js

Loader →
OBJLoader
A loader for loading a .obj resource.
The OBJ file format is a simple data-format that represents 3D geometry in a human readable format as the position of each vertex, the UV position of each texture coordinate vertex, vertex normals, and the faces that make each polygon defined as a list of vertices, and texture vertices.

Import
OBJLoader is an add-on, and must be imported explicitly. See Installation / Addons.

import { OBJLoader } from 'three/addons/loaders/OBJLoader.js';
Code Example
// instantiate a loader
const loader = new OBJLoader();

// load a resource
loader.load(
	// resource URL
	'models/monster.obj',
	// called when resource is loaded
	function ( object ) {

		scene.add( object );

	},
	// called when loading is in progress
	function ( xhr ) {

		console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

	},
	// called when loading has errors
	function ( error ) {

		console.log( 'An error happened' );

	}
);
Examples
webgl_loader_obj

Constructor
OBJLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new OBJLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — A string containing the path/URL of the .obj file.
onLoad — (optional) A function to be called after the loading is successfully completed. The function receives the loaded Object3D as an argument.
onProgress — (optional) A function to be called while the loading is in progress. The function receives a XMLHttpRequest instance, which contains total and loaded bytes. If the server does not set the Content-Length header; .total will be 0.
onError — (optional) A function to be called if an error occurs during loading. The function receives error as an argument.

Begin loading from url and call onLoad with the parsed response content.

.parse ( text : String ) : Object3D
text — The textual obj structure to parse.

Returns an Object3D. It contains the parsed meshes as Mesh and lines as LineSegments.
All geometry is created as BufferGeometry. Default materials are created as MeshPhongMaterial.
If an obj object or group uses multiple materials while declaring faces, geometry groups and an array of materials are used.

.setMaterials ( materials : MTLLoader.MaterialCreator ) : this
MTLLoader.MaterialCreator materials - A MaterialCreator instance.

Sets materials loaded by MTLLoader or any other supplier of a MTLLoader.MaterialCreator.

Source
examples/jsm/loaders/OBJLoader.js

Loader →
PCDLoader
A loader for the PCD (Point Cloud Data) file format. PCDLoader supports ASCII and (compressed) binary files as well as the following PCD fields:

x y z
rgb
normal_x normal_y normal_z
intensity
label
Import
PCDLoader is an add-on, and must be imported explicitly. See Installation / Addons.

import { PCDLoader } from 'three/addons/loaders/PCDLoader.js';
Code Example
// instantiate a loader
const loader = new PCDLoader();

// load a resource
loader.load(
	// resource URL
	'pointcloud.pcd',
	// called when the resource is loaded
	function ( points ) {

		scene.add( points );

	},
	// called when loading is in progress
	function ( xhr ) {

		console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

	},
	// called when loading has errors
	function ( error ) {

		console.log( 'An error happened' );

	}
);
Examples
webgl_loader_pcd

Constructor
PCDLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new PCDLoader.

Properties
See the base Loader class for common properties.

littleEndian
Default value is true.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — A string containing the path/URL of the .pcd file.
onLoad — (optional) A function to be called after loading is successfully completed. The function receives loaded Object3D as an argument.
onProgress — (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, which contains total and loaded bytes. If the server does not set the Content-Length header; .total will be 0.
onError — (optional) A function to be called if an error occurs during loading. The function receives the error as an argument.

Begin loading from url and call onLoad with the parsed response content.

.parse ( data : Arraybuffer,url : String ) : Object3D
data — The binary structure to parse.

url — The file name or file url.

Parse an pcd binary structure and return an Object3D.
The object is converted to Points with a BufferGeometry and a PointsMaterial.

Source
examples/jsm/loaders/PCDLoader.js

Loader →
PDBLoader
A loader for loading a .pdb resource.
The Protein Data Bank file format is a textual file describing the three-dimensional structures of molecules.

Import
PDBLoader is an add-on, and must be imported explicitly. See Installation / Addons.

import { PDBLoader } from 'three/addons/loaders/PDBLoader.js';
Code Example
// instantiate a loader
const loader = new PDBLoader();

// load a PDB resource
loader.load(
	// resource URL
	'models/pdb/caffeine.pdb',
	// called when the resource is loaded
	function ( pdb ) {

		const geometryAtoms = pdb.geometryAtoms;
		const geometryBonds = pdb.geometryBonds;
		const json = pdb.json;

		console.log( 'This molecule has ' + json.atoms.length + ' atoms' );

	},
	// called when loading is in progress
	function ( xhr ) {

		console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

	},
	// called when loading has errors
	function ( error ) {

		console.log( 'An error happened' );

	}
);
Examples
webgl_loader_pdb

Constructor
PDBLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new PDBLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — A string containing the path/URL of the .pdb file.
onLoad — (optional) A function to be called after loading is successfully completed. The function receives the object having the following properties. geometryAtoms, geometryBonds and the JSON structure.
onProgress — (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, which contains total and loaded bytes. If the server does not set the Content-Length header; .total will be 0.
onError — (optional) A function to be called if an error occurs during loading. The function receives the error as an argument.

Begin loading from url and call onLoad with the parsed response content.

.parse ( text : String ) : Object
text — The textual pdb structure to parse.

Parse a pdb text and return a JSON structure.

Source
examples/jsm/loaders/PDBLoader.js

Loader →
SVGLoader
A loader for loading a .svg resource.
Scalable Vector Graphics is an XML-based vector image format for two-dimensional graphics with support for interactivity and animation.

Import
SVGLoader is an add-on, and must be imported explicitly. See Installation / Addons.

import { SVGLoader } from 'three/addons/loaders/SVGLoader.js';
Code Example
// instantiate a loader
const loader = new SVGLoader();

// load a SVG resource
loader.load(
	// resource URL
	'data/svgSample.svg',
	// called when the resource is loaded
	function ( data ) {

		const paths = data.paths;
		const group = new THREE.Group();

		for ( let i = 0; i < paths.length; i ++ ) {

			const path = paths[ i ];

			const material = new THREE.MeshBasicMaterial( {
				color: path.color,
				side: THREE.DoubleSide,
				depthWrite: false
			} );

			const shapes = SVGLoader.createShapes( path );

			for ( let j = 0; j < shapes.length; j ++ ) {

				const shape = shapes[ j ];
				const geometry = new THREE.ShapeGeometry( shape );
				const mesh = new THREE.Mesh( geometry, material );
				group.add( mesh );

			}

		}

		scene.add( group );

	},
	// called when loading is in progress
	function ( xhr ) {

		console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

	},
	// called when loading has errors
	function ( error ) {

		console.log( 'An error happened' );

	}
);
Examples
webgl_loader_svg

Constructor
SVGLoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new SVGLoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : undefined
url — A string containing the path/URL of the .svg file.
onLoad — (optional) A function to be called after loading is successfully completed. The function receives an array of ShapePath as an argument.
onProgress — (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, which contains total and loaded bytes. If the server does not set the Content-Length header; .total will be 0.
onError — (optional) A function to be called if an error occurs during loading. The function receives the error as an argument.

Begin loading from url and call onLoad with the response content.

Static Methods
.createShapes ( shape : ShapePath ) : Array
shape — A ShapePath from the array of ShapePath, given as argument in the onLoad function for the load function of SVGLoader.

Returns one or more Shape objects created from the shape : ShapePath provided as an argument in this function.

Source
examples/jsm/loaders/SVGLoader.js

Loader →
TGALoader
A loader for loading a .tga resource.
TGA is a raster graphics, image file format.

Import
TGALoader is an add-on, and must be imported explicitly. See Installation / Addons.

import { TGALoader } from 'three/addons/loaders/TGALoader.js';
Code Example
// instantiate a loader
const loader = new TGALoader();

// load a resource
const texture = loader.load(
	// resource URL
	'textures/crate_grey8.tga'
	// called when loading is completed
	function ( texture ) {

		console.log( 'Texture is loaded' );

	},
	// called when the loading is in progress
	function ( xhr ) {

		console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

	},
	// called when the loading fails
	function ( error ) {

		console.log( 'An error happened' );

	}
);

const material = new THREE.MeshPhongMaterial( {
	color: 0xffffff,
	map: texture
} );
Examples
webgl_loader_texture_tga

Constructor
TGALoader( manager : LoadingManager )
manager — The loadingManager for the loader to use. Default is THREE.DefaultLoadingManager.

Creates a new TGALoader.

Properties
See the base Loader class for common properties.

Methods
See the base Loader class for common methods.

.load ( url : String, onLoad : Function, onProgress : Function, onError : Function ) : DataTexture
url — A string containing the path/URL of the .tga file.
onLoad — (optional) A function to be called after loading is successfully completed. The function receives loaded DataTexture as an argument.
onProgress — (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, which contains .total and .loaded bytes. If the server does not set the Content-Length header; .total will be 0.
onError — (optional) A function to be called if an error occurs during loading. The function receives the error as an argument.

Begin loading from url and pass the loaded texture to onLoad. The texture is also directly returned for immediate use (but may not be fully loaded).

Source
examples/jsm/loaders/TGALoader.js

