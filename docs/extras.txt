Curve
An abstract base class for creating a Curve object that contains methods for interpolation. For an array of Curves see CurvePath.

Constructor
Curve()
This constructor creates a new Curve.

Properties
.arcLengthDivisions : Integer
This value determines the amount of divisions when calculating the cumulative segment lengths of a curve via .getLengths. To ensure precision when using methods like .getSpacedPoints, it is recommended to increase .arcLengthDivisions if the curve is very large. Default is 200.

Methods
.getPoint ( t : Float, optionalTarget : Vector ) : Vector
t - A position on the curve. Must be in the range [ 0, 1 ].
optionalTarget — (optional) If specified, the result will be copied into this Vector, otherwise a new Vector will be created.

Returns a vector for a given position on the curve.

.getPointAt ( u : Float, optionalTarget : Vector ) : Vector
u - A position on the curve according to the arc length. Must be in the range [ 0, 1 ].
optionalTarget — (optional) If specified, the result will be copied into this Vector, otherwise a new Vector will be created.

Returns a vector for a given position on the curve according to the arc length.

.getPoints ( divisions : Integer ) : Array
divisions -- number of pieces to divide the curve into. Default is 5.

Returns a set of divisions + 1 points using getPoint( t ).

.getSpacedPoints ( divisions : Integer ) : Array
divisions -- number of pieces to divide the curve into. Default is 5.

Returns a set of divisions + 1 equi-spaced points using getPointAt( u ).

.getLength () : Float
Get total curve arc length.

.getLengths ( divisions : Integer ) : Array
Get list of cumulative segment lengths.

.updateArcLengths () : undefined
Update the cumulative segment distance cache. The method must be called every time curve parameters are changed. If an updated curve is part of a composed curve like CurvePath, .updateArcLengths() must be called on the composed curve, too.

.getUtoTmapping ( u : Float, distance : Float ) : Float
Given u in the range ( 0 .. 1 ), returns t also in the range ( 0 .. 1 ). u and t can then be used to give you points which are equidistant from the ends of the curve, using .getPoint.

.getTangent ( t : Float, optionalTarget : Vector ) : Vector
t - A position on the curve. Must be in the range [ 0, 1 ].
optionalTarget — (optional) If specified, the result will be copied into this Vector, otherwise a new Vector will be created.

Returns a unit vector tangent at t. If the derived curve does not implement its tangent derivation, two points a small delta apart will be used to find its gradient which seems to give a reasonable approximation.

.getTangentAt ( u : Float, optionalTarget : Vector ) : Vector
u - A position on the curve according to the arc length. Must be in the range [ 0, 1 ].
optionalTarget — (optional) If specified, the result will be copied into this Vector, otherwise a new Vector will be created.

Returns tangent at a point which is equidistant to the ends of the curve from the point given in .getTangent.

.computeFrenetFrames ( segments : Integer, closed : Boolean ) : Object
Generates the Frenet Frames. Requires a curve definition in 3D space. Used in geometries like TubeGeometry or ExtrudeGeometry.

.clone () : Curve
Creates a clone of this instance.

.copy ( source : Curve ) : this
Copies another Curve object to this instance.

.toJSON () : Object
Returns a JSON object representation of this instance.

.fromJSON ( json : Object ) : this
Copies the data from the given JSON object to this instance.

Source
src/extras/core/Curve.js

Curve →
CurvePath
An abstract base class extending Curve. A CurvePath is simply an array of connected curves, but retains the api of a curve.

Constructor
CurvePath()
The constructor take no parameters.

Properties
See the base Curve class for common properties.

.curves : Array
The array of Curves.

.autoClose : Boolean
Whether or not to automatically close the path.

Methods
See the base Curve class for common methods.

.add ( curve : Curve ) : undefined
Add a curve to the .curves array.

.closePath () : this
Adds a lineCurve to close the path.

.getCurveLengths () : Array
Get list of cumulative curve lengths of the curves in the .curves array.

.getPoints ( divisions : Integer ) : Array
divisions -- number of pieces to divide the curve into. Default is 12.

Returns an array of points representing a sequence of curves. The division parameter defines the number of pieces each curve is divided into. However, for optimization and quality purposes, the actual sampling resolution for each curve depends on its type. For example, for a LineCurve, the returned number of points is always just 2.

.getSpacedPoints ( divisions : Integer ) : Array
divisions -- number of pieces to divide the curve into. Default is 40.

Returns a set of divisions + 1 equi-spaced points using getPointAt( u ).

Source
src/extras/core/CurvePath.js

Interpolations
Interpolations contains spline and Bézier functions internally used by concrete curve classes.

Methods
.CatmullRom ( t : Float, p0 : Float, p1 : Float, p2 : Float, p3 : Float ) : Float
t -- interpolation weight.
p0, p1, p2, p3 -- the points defining the spline curve.

Used internally by SplineCurve.

.QuadraticBezier ( t : Float, p0 : Float, p1 : Float, p2 : Float ) : Float
t -- interpolation weight.
p0, p1, p2 -- the starting, control and end points defining the curve.

Used internally by QuadraticBezierCurve3 and QuadraticBezierCurve.

.CubicBezier ( t : Float, p0 : Float, p1 : Float, p2 : Float, p3 : Float ) : Float
t -- interpolation weight.
p0, p1, p2, p3 -- the starting, control(twice) and end points defining the curve.

Used internally by CubicBezierCurve3 and CubicBezierCurve.

Source
src/extras/core/Interpolations.js

Curve → CurvePath →
Path
A 2D path representation. The class provides methods for creating paths and contours of 2D shapes similar to the 2D Canvas API.

Code Example
const path = new THREE.Path();

path.lineTo( 0, 0.8 );
path.quadraticCurveTo( 0, 1, 0.2, 1 );
path.lineTo( 1, 1 );

const points = path.getPoints();

const geometry = new THREE.BufferGeometry().setFromPoints( points );
const material = new THREE.LineBasicMaterial( { color: 0xffffff } );

const line = new THREE.Line( geometry, material );
scene.add( line );
Constructor
Path( points : Array )
points -- (optional) array of Vector2s.

Creates a Path from the points. The first point defines the offset, then successive points are added to the curves array as LineCurves.

If no points are specified, an empty path is created and the .currentPoint is set to the origin.

Properties
See the base CurvePath class for common properties.

.currentPoint : Vector2
The current offset of the path. Any new Curve added will start here.

Methods
See the base CurvePath class for common methods.

.absarc ( x : Float, y : Float, radius : Float, startAngle : Float, endAngle : Float, clockwise : Boolean ) : this
x, y -- The absolute center of the arc.
radius -- The radius of the arc.
startAngle -- The start angle in radians.
endAngle -- The end angle in radians.
clockwise -- Sweep the arc clockwise. Defaults to false.

Adds an absolutely positioned EllipseCurve to the path.

.absellipse ( x : Float, y : Float, xRadius : Float, yRadius : Float, startAngle : Float, endAngle : Float, clockwise : Boolean, rotation : Float ) : this
x, y -- The absolute center of the ellipse.
xRadius -- The radius of the ellipse in the x axis.
yRadius -- The radius of the ellipse in the y axis.
startAngle -- The start angle in radians.
endAngle -- The end angle in radians.
clockwise -- Sweep the ellipse clockwise. Defaults to false.
rotation -- The rotation angle of the ellipse in radians, counterclockwise from the positive X axis. Optional, defaults to 0.

Adds an absolutely positioned EllipseCurve to the path.

.arc ( x : Float, y : Float, radius : Float, startAngle : Float, endAngle : Float, clockwise : Boolean ) : this
x, y -- The center of the arc offset from the last call.
radius -- The radius of the arc.
startAngle -- The start angle in radians.
endAngle -- The end angle in radians.
clockwise -- Sweep the arc clockwise. Defaults to false.

Adds an EllipseCurve to the path, positioned relative to .currentPoint.

.bezierCurveTo ( cp1X : Float, cp1Y : Float, cp2X : Float, cp2Y : Float, x : Float, y : Float ) : this
This creates a bezier curve from .currentPoint with (cp1X, cp1Y) and (cp2X, cp2Y) as control points and updates .currentPoint to x and y.

.ellipse ( x : Float, y : Float, xRadius : Float, yRadius : Float, startAngle : Float, endAngle : Float, clockwise : Boolean, rotation : Float ) : this
x, y -- The center of the ellipse offset from the last call.
xRadius -- The radius of the ellipse in the x axis.
yRadius -- The radius of the ellipse in the y axis.
startAngle -- The start angle in radians.
endAngle -- The end angle in radians.
clockwise -- Sweep the ellipse clockwise. Defaults to false.
rotation -- The rotation angle of the ellipse in radians, counterclockwise from the positive X axis. Optional, defaults to 0.

Adds an EllipseCurve to the path, positioned relative to .currentPoint.

.lineTo ( x : Float, y : Float ) : this
Connects a LineCurve from .currentPoint to x, y onto the path.

.moveTo ( x : Float, y : Float ) : this
Move the .currentPoint to x, y.

.quadraticCurveTo ( cpX : Float, cpY : Float, x : Float, y : Float ) : this
Creates a quadratic curve from .currentPoint with cpX and cpY as control point and updates .currentPoint to x and y.

.setFromPoints ( vector2s : Array ) : this
points -- array of Vector2s.

Points are added to the curves array as LineCurves.

.splineThru ( points : Array ) : this
points - An array of Vector2s

Connects a new SplineCurve onto the path.

Source
src/extras/core/Path.js

Curve → CurvePath → Path →
Shape
Defines an arbitrary 2d shape plane using paths with optional holes. It can be used with ExtrudeGeometry, ShapeGeometry, to get points, or to get triangulated faces.

Code Example
const heartShape = new THREE.Shape();

heartShape.moveTo( 25, 25 );
heartShape.bezierCurveTo( 25, 25, 20, 0, 0, 0 );
heartShape.bezierCurveTo( - 30, 0, - 30, 35, - 30, 35 );
heartShape.bezierCurveTo( - 30, 55, - 10, 77, 25, 95 );
heartShape.bezierCurveTo( 60, 77, 80, 55, 80, 35 );
heartShape.bezierCurveTo( 80, 35, 80, 0, 50, 0 );
heartShape.bezierCurveTo( 35, 0, 25, 25, 25, 25 );

const extrudeSettings = { 
	depth: 8, 
	bevelEnabled: true, 
	bevelSegments: 2, 
	steps: 2, 
	bevelSize: 1, 
	bevelThickness: 1 
};

const geometry = new THREE.ExtrudeGeometry( heartShape, extrudeSettings );

const mesh = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial() );
Examples
geometry / shapes
geometry / extrude / shapes

Constructor
Shape( points : Array )
points -- (optional) array of Vector2s.

Creates a Shape from the points. The first point defines the offset, then successive points are added to the curves array as LineCurves.

If no points are specified, an empty shape is created and the .currentPoint is set to the origin.

Properties
See the base Path class for common properties.

.uuid : String
UUID of this instance. This gets automatically assigned, so this shouldn't be edited.

.holes : Array
An array of paths that define the holes in the shape.

Methods
See the base Path class for common methods.

.extractPoints ( divisions : Integer ) : Array
divisions -- The fineness of the result.

Call getPoints on the shape and the .holes array, and return an object of the form:
 { shape holes } 
where shape and holes are arrays of Vector2s.

.getPointsHoles ( divisions : Integer ) : Array
divisions -- The fineness of the result.

Get an array of Vector2s that represent the holes in the shape.

Source
src/extras/core/Shape.js

ShapePath
This class is used to convert a series of shapes to an array of Paths, for example an SVG shape to a path.

Constructor
ShapePath( )
Creates a new ShapePath. Unlike a Path, no points are passed in as the ShapePath is designed to be generated after creation.

Properties
.subPaths : Array
Array of Paths.

.currentPath : Array
The current Path that is being generated.

.color : Color
Color of the shape, by default set to white (0xffffff).

Methods
.moveTo ( x : Float, y : Float ) : this
Starts a new Path and calls Path.moveTo( x, y ) on that Path. Also points currentPath to that Path.

.lineTo ( x : Float, y : Float ) : this
This creates a line from the currentPath's offset to X and Y and updates the offset to X and Y.

.quadraticCurveTo ( cpX : Float, cpY : Float, x : Float, y : Float ) : this
This creates a quadratic curve from the currentPath's offset to x and y with cpX and cpY as control point and updates the currentPath's offset to x and y.

.bezierCurveTo ( cp1X : Float, cp1Y : Float, cp2X : Float, cp2Y : Float, x : Float, y : Float ) : this
This creates a bezier curve from the currentPath's offset to x and y with cp1X, cp1Y and cp2X, cp2Y as control points and updates the currentPath's offset to x and y.

.splineThru ( points : Array ) : this
points - An array of Vector2s

Connects a new SplineCurve onto the currentPath.

.toShapes ( isCCW : Boolean ) : Array
isCCW -- Changes how solids and holes are generated

Converts the subPaths array into an array of Shapes. By default solid shapes are defined clockwise (CW) and holes are defined counterclockwise (CCW). If isCCW is set to true, then those are flipped.

Source
src/extras/core/ShapePath.js

